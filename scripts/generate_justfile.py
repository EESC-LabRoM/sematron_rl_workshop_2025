#!/usr/bin/env python3

import re
from pathlib import Path
from datetime import datetime

SEARCH_DIR = Path("isaaclab_experiments")
OUTPUT_FILE = Path("justfile")

# Regular expression to find 'id="..."' or "id='...'" and capture the value from gym
ID_REGEX = re.compile(
    r"""
    id\s*=\s* # Matches 'id' followed by optional whitespace, '=', optional whitespace
    ["']      # Matches the opening quote (either " or ')
    (.*?)     # Captures the content inside the quotes (non-greedy)
    ["']      # Matches the closing quote
""",
    re.VERBOSE,
)


def find_task_ids(file_path: Path):
    """
    Reads a file and extracts all task IDs from gym.register calls.
    """
    ids_found = []
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            content = f.read()
            matches = ID_REGEX.findall(content)
            for match in matches:
                ids_found.append(match)
    except Exception as e:
        print(f"Error reading or parsing file {file_path}: {e}")
    return ids_found


def generate_justfile_content(search_dir_path: Path):
    """
    Generates the content for the justfile by finding __init__.py files
    and extracting task IDs.
    """
    new_recipes = []
    files_processed_count = 0

    base_path_for_comments = search_dir_path.parent

    for init_file in search_dir_path.rglob("__init__.py"):
        files_processed_count += 1
        print(f"Processing: {init_file.resolve()}")
        task_ids = find_task_ids(init_file)

        if not task_ids:
            continue

        relative_init_file_path = init_file.relative_to(base_path_for_comments)

        new_recipes.append(f"# Recipes from: {relative_init_file_path}")
        for task_id in task_ids:
            print(f"  Found ID: {task_id}")
            task_id_lower = task_id.lower()

            if "play" in task_id_lower:
                new_recipes.append(f"play-{task_id}:")
                new_recipes.append(f'    python scripts/play.py --task "{task_id}"')
            else:
                new_recipes.append(f"train-{task_id}:")
                new_recipes.append(
                    f'    python scripts/train_rsl.py --task "{task_id}" --headless'
                )
            new_recipes.append("")  # Add a blank line for readability

    return "\n".join(new_recipes)


def main():
    """
    Main function to generate the justfile.
    """
    print(f"Starting justfile generation...")
    print(f"Searching in: {SEARCH_DIR.resolve()}")
    print(f"Outputting to: {OUTPUT_FILE.resolve()}")

    header = [
        "# Autogenerated justfile by Python script",
        f"# Timestamp: {datetime.now().isoformat()}",
        "# Logic: Generates 'play-[id]' if 'play' is in id (case-insensitive), otherwise 'train-[id]'.",
        f"# Searched in: {SEARCH_DIR.resolve()}",
        "list_envs:",
        "   python scripts/list_envs.py --/log/level=error --/log/fileLogLevel=error --/log/outputStreamLevel=error",
        "",
        "generate_envs:",
        "   python scripts/generate_justfile.py",
        "",
    ]

    justfile_recipes_content = generate_justfile_content(SEARCH_DIR)

    # Construct full content, ensuring header is always present
    full_content_parts = header
    full_content_parts.append(justfile_recipes_content)
    full_content = "\n".join(full_content_parts)

    with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
        f.write(full_content)
    print(f"\nJustfile '{OUTPUT_FILE.resolve()}' generated successfully.")


if __name__ == "__main__":
    main()
